name: test

on:
  push:
    branches: [main] # on pushes TO main
  pull_request:
    branches: [main] # on pull requests AGAINST main

# cancel CI runs when a new commit is pushed to any branch except main
concurrency:
  group: "test-${{ github.ref }}"
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

permissions:
  contents: read

env:
  REPORT_DIR: "out/autobahn"

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # build against the two latest releases, to match golang's release
        # policy: https://go.dev/doc/devel/release#policy
        go-version:
        - 'stable'
        - 'oldstable'

    steps:
    - name: setup
      uses: actions/setup-go@v5
      with:
        go-version: ${{matrix.go-version}}

    - name: checkout
      uses: actions/checkout@v4

    - name: test
      run: make testci

    - name: report code coverage
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
      if: ${{ matrix.go-version == 'stable' }}

  autobahn:
    runs-on: ubuntu-latest

    steps:
    - name: setup
      uses: actions/setup-go@v5
      with:
        go-version: stable

    - name: checkout
      uses: actions/checkout@v4

    - name: run autobahn tests
      run: make testautobahn

    - name: upload autobahn report artifact
      uses: actions/upload-artifact@v4
      with:
        name: autobahn-report
        path: ${{ env.REPORT_DIR }}/report
        retention-days: 1

  publish-autobahn-reports:
    runs-on: ubuntu-latest
    needs: autobahn
    # if: github.ref == 'refs/heads/main'

    # Set permissions needed for GitHub Pages deployment
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for commit timestamps

    - name: setup pages
      uses: actions/configure-pages@v4

    - name: download latest autobahn report
      uses: actions/download-artifact@v4
      with:
        name: autobahn-report
        path: latest-report

    - name: download existing autobahn reports
      run: |
        # Create reports directory
        mkdir -p reports

        # Download existing reports from GitHub Pages using configured URL
        wget -q -r -np -nH --cut-dirs=1 "$GITHUB_PAGES_URL" -P reports/ || true

        # Clean up wget artifacts
        rm -f reports/robots.txt reports/*.html.*

    - name: prepare reports
      run: |
        # Define constants
        KEEP_REPORTS=10

        # Get commit timestamp and short SHA
        COMMIT_TIMESTAMP=$(git show -s --format=%cd --date=format:'%Y%m%d-%H%M%S' $GITHUB_SHA)
        COMMIT_SHA=${GITHUB_SHA::8}
        REPORT_DIR="reports/${COMMIT_TIMESTAMP}-${COMMIT_SHA}"

        # Copy new report to directory named with commit info
        cp -r latest-report $REPORT_DIR

        # Generate index.html with all reports
        cat > reports/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>mccutchen/websocket: Autobahn Fuzzing Client Test Reports</title>
        </head>
        <body>
            <h1><a href="https://github.com/mccutchen/websocket">mccutchen/websocket</a>: Autobahn Fuzzing Client Test Reports</h1>
            <p>The ${KEEP_REPORTS} most recent <a href="https://github.com/crossbario/autobahn-testsuite">Autobahn fuzzing client</a>
            test reports against the main branch of <a href="https://github.com/mccutchen/websocket">mccutchen/websocket</a>
            library.</p>
            <table>
                <tr>
                    <th>Report</th>
                    <th>Commit</th>
                </tr>
        EOF

        # List all report directories in reverse chronological order
        REPORT_DIRS=($(ls -rd reports/*/))
        for dir in "${REPORT_DIRS[@]}"; do
          if [ -f "${dir}index.html" ]; then
            dir_name=$(basename $dir)
            # Extract timestamp and sha from directory name
            DIR_TIMESTAMP=${dir_name%-*}
            DIR_SHA=${dir_name##*-}
            # Format the timestamp more readably
            FORMATTED_DATE=$(date -d "${DIR_TIMESTAMP:0:8} ${DIR_TIMESTAMP:9:2}:${DIR_TIMESTAMP:11:2}:${DIR_TIMESTAMP:13:2}" '+%Y-%m-%d %H:%M:%S')

            cat >> reports/index.html << 'EOF'
            <tr>
                <td><a href="${dir_name}/">${FORMATTED_DATE}</a></td>
                <td><a href="https://github.com/mccutchen/websocket/commit/${DIR_SHA}">${DIR_SHA}</a></td>
            </tr>
            EOF
          fi
        done

        cat >> reports/index.html << 'EOF'
            </table>
        </body>
        </html>
        EOF

        # Remove older reports beyond KEEP_REPORTS
        if [ ${#REPORT_DIRS[@]} -gt $KEEP_REPORTS ]; then
          for old_dir in "${REPORT_DIRS[@]:$KEEP_REPORTS}"; do
            echo "Removing old report: $old_dir"
            rm -rf "$old_dir"
          done
        fi

    - name: upload pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: reports

    - name: deploy to github pages
      id: deployment
      uses: actions/deploy-pages@v4
